Index: locales/ru_RU.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n    \"FirstLaunch\": {\r\n      \"first_launch_notification_label\": \"О, это ваш первый запуск Emilia, давайте настроим её?\",\r\n      \"pre_first_launch_notification_label\": \"Обратите внимание, вы используете предварительную версию Emilia, о всех найденных ошибках сообщайте на GitHub\",\r\n      \"first_launch_notification_button_yes\": \"Вперёд!\",\r\n      \"first_launch_notification_button_no\": \"Предпочту отказаться\",\r\n      \"second_page\": \"Выберите желаемый сервис AI\",\r\n      \"use_characterai\": \"Получите токен в открывшемся окне\",\r\n      \"use_gemini\": \"Получите API-ключ в открывшемся окне браузера и введите его здесь\",\r\n      \"enterscharaidata\": \"Настройте своего первого персонажа в открывшемся окне\",\r\n      \"entervoice\": \"Введите название нужного голоса\",\r\n      \"characterai_button\": \"Character.AI\",\r\n      \"gemini_button\": \"Google Gemini\",\r\n      \"ready_button\": \"Готово!\",\r\n      \"relaunch_button\": \"Перезапустить!\"\r\n    },\r\n    \"MainWindow\": {\r\n      \"start\": \"Запустить\",\r\n      \"starttext\": \"Запустить в текстовом режиме\",\r\n      \"textmodeinput\": \"Прежде чем жать кнопку ниже...\",\r\n      \"geminitoken\": \"Ваш Gemini токен:\",\r\n      \"charactertoken\": \"Токен клиента:\",\r\n      \"characterid\": \"ID персонажа:\",\r\n      \"token\": \"Токен...\",\r\n      \"voice\": \"Голос:\",\r\n      \"voices\": \"aidar, baya, kseniya, xenia, eugene или же random\",\r\n      \"save\": \"Сохранить\",\r\n      \"version\": \"&Версия: \",\r\n      \"gettoken\": \"&Получить токен\",\r\n      \"customcolors\": \"&Изменить цвета\",\r\n      \"changetheme\": \"&Сменить тему\",\r\n      \"usetextmode\": \"&Активировать текстовый режим\",\r\n      \"usevoicemode\": \"&Активировать голосовой режим\",\r\n      \"voicegendevice\": \"&Устройство для генерации озвучки\",\r\n      \"usecpu\": \"&Использовать ЦП\",\r\n      \"usegpu\": \"&Использовать ГП\",\r\n      \"guichange\": \"&Изменить интерфейс\",\r\n      \"devicesselector\": \"&Выбор устройств\",\r\n      \"changeai\": \"Смена ИИ-сервиса\",\r\n      \"noncriterror\": \"Возникла ошибка, но код продолжаться может \",\r\n      \"criterror\": \"Возникла ошибка, код продолжаться не может \",\r\n      \"inputdevice\": \"Устройство ввода\",\r\n      \"outputdevice\": \"Устройство вывода\",\r\n      \"usegemini\": \"&Использовать Gemini\",\r\n      \"usecharacterai\": \"&Использовать Character AI\",\r\n      \"charchoice\": \"&Выбрать персонажа\",\r\n      \"openchareditor\": \"Открыть редактор персонажей\",\r\n      \"changelanguage\": \"Сменить язык\",\r\n      \"BUUUG\": \"&Сообщить об ошибке\",\r\n      \"enableautoupdate\": \"&Включить автообновления\",\r\n      \"disableautoupdate\": \"&Выключить автообновления\",\r\n      \"spacerwincharai\": \"     \",\r\n      \"spacerwingemini\": \"                                                \",\r\n      \"spacerfusioncharai\": \"       \",\r\n      \"spacerfusiongemini\": \"                                                  \",\r\n      \"aboutemi\": \"&Об Emilia \"\r\n    },\r\n    \"About\": {\r\n      \"aboutemi\": \"Об Emilia \",\r\n      \"languagefrom\": \"<br><br>Русский язык от <a href='https://github.com/Kajitsy'>@Kajitsy</a>, от автора, ага да)\",\r\n      \"newin\": \"<br><br>Новое в \",\r\n      \"whatsnew\": \": <br>• Списка изменений не будет до релиза.\",\r\n      \"viewallreleases\": \"<br><br><a href='https://github.com/Kajitsy/Emilia/releases'>Чтобы посмотреть все прошлые релизы кликай сюда</a>\",\r\n      \"emiopenproject\": \"Emilia - проект с открытым исходным кодом, позволяющий разговаривать с твоей любимой Вайфу.<br> На данный момент вы используете версию \",\r\n      \"usever\": \" которая полностью бесплатно распространяется на <a href='https://github.com/Kajitsy/Emilia'>GitHub</a>\"\r\n    },\r\n    \"Main\": {\r\n      \"speakup\": \"Пользователь: Говорите...\",\r\n      \"sayagain\": \"Скажите ещё раз...\",\r\n      \"user\": \"Пользователь: \",\r\n      \"emigen\": \"Вайфу: генерация...\",\r\n      \"emimessage\": \"Вайфу: \",\r\n      \"sendchating\": \"Вот наша с тобой история чата: \"\r\n    },\r\n    \"GetToken\": {\r\n      \"youremail\": \"Ваша электронная почта:\",\r\n      \"sendemail\": \"Отправить письмо с ссылкой\",\r\n      \"linkfromemail\": \"Ссылка с почты:\",\r\n      \"gettoken\": \"Получить токен\",\r\n      \"yourtoken\": \"Ваш токен: \\n\",\r\n      \"saveincharaiconfig\": \"\\nЕсли что он уже сохранён в charaiconfig.json\"\r\n    },\r\n    \"CharEditor\": {\r\n      \"charname\": \"Имя персонажа:\",\r\n      \"addchar\": \"Добавить персонажа\",\r\n      \"delchar\": \"Удалить персонажа\",\r\n      \"error\": \"ОШИБКА, ПОПРОБУЙТЕ ЕЩЁ РАЗ \",\r\n      \"notavchar\": \"Твоего персонажа в коде нет\"\r\n    },\r\n    \"AutoUpdate\": {\r\n      \"upgradeto\": \"Обновление до\",\r\n      \"emiliaupdated\": \"Emilia обновлена до Build\"\r\n    },\r\n    \"Errors\": {\r\n      \"Label\": \"Ошибка\",\r\n      \"Gemini 400\": \"Ваше местоположение не позволяет использовать Gemini :(\",\r\n      \"nonvoice\": \"Пожалуйста, введите нужный голос\",\r\n      \"other\": \"Хм, возникла неизвестная ошибка:\\n\",\r\n      \"UpdateCheckError\": \"Ошибка при проверке обновлений:\",\r\n      \"UpdateDownloadError\": \"Ошибка при загрузке обновления:\",\r\n      \"BadZipFile\": \"Ошибка при распаковке архива:\"\r\n    }\r\n  }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/locales/ru_RU.json b/locales/ru_RU.json
--- a/locales/ru_RU.json	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
+++ b/locales/ru_RU.json	(date 1717950440737)
@@ -47,8 +47,8 @@
       "openchareditor": "Открыть редактор персонажей",
       "changelanguage": "Сменить язык",
       "BUUUG": "&Сообщить об ошибке",
-      "enableautoupdate": "&Включить автообновления",
-      "disableautoupdate": "&Выключить автообновления",
+      "enableautoupdate": "&Вкл. автообновления",
+      "disableautoupdate": "&Выкл. автообновления",
       "spacerwincharai": "     ",
       "spacerwingemini": "                                                ",
       "spacerfusioncharai": "       ",
Index: EmotesConfig.json
===================================================================
diff --git a/EmotesConfig.json b/EmotesConfig.json
deleted file mode 100644
--- a/EmotesConfig.json	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
+++ /dev/null	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
@@ -1,12 +0,0 @@
-{
-    "Emilia": {
-        "name": "Emilia",
-        "char": "123",
-        "voice": "aidar"
-    },
-    "123": {
-        "name": "123",
-        "char": "123",
-        "voice": "123"
-    }
-}
\ No newline at end of file
Index: Emilia Emotes Core.py
===================================================================
diff --git a/Emilia Emotes Core.py b/Emilia Emotes Core.py
deleted file mode 100644
--- a/Emilia Emotes Core.py	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
+++ /dev/null	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
@@ -1,157 +0,0 @@
-import time
-
-import pyvts, asyncio, os, json, random
-
-def getconfig2(emote, configfile = 'Emotes.json'):
-    with open(configfile, "r") as f:
-        emotes_data = json.load(f)
-    listening_data = emotes_data[emote]
-    rndm = EEC().RandomBetween
-
-    # Перебираем параметры и вычисляем значения
-    for parameter_name, parameter_value in listening_data.items():
-
-        value = eval(parameter_value)
-
-        # Используем значение для установки параметра в VTube Studio
-        # ...
-
-        # Пример использования значения:
-class EEC():
-    """
-    EMC - Emilia Emotes Core
-    """
-    
-    plugin_info = {
-        "plugin_name": "Emilia VTube",
-        "developer": "kajitsy",
-        "authentication_token_path": "./token.txt"
-    }
-
-    myvts = pyvts.vts(plugin_info)
-
-    async def VTubeConnect(self):
-        """
-        Подключение к Vtube Studio
-        """
-
-        await self.myvts.connect()
-        try:
-            await self.myvts.read_token()
-            await self.myvts.request_authenticate()
-        except:
-            await self.myvts.request_authenticate_token()
-            await self.myvts.write_token()
-            await self.myvts.request_authenticate()
-        self.myvts.load_icon("./images/emilia.png")
-
-    async def SetCustomParameter(self, name, value=50, min=-100, max=100):
-        """
-        Лучше всего использовать для создания параметров плагина
-
-        CustomParameter("EmiEyeX", -100, 100, 0)
-        """
-
-        try:
-            await self.myvts.request(
-                self.myvts.vts_request.requestCustomParameter(name, min, max, value)
-            )
-        except:
-            await self.VTubeConnect()
-            await self.myvts.request(
-                self.myvts.vts_request.requestCustomParameter(name, min, max, value)
-            )
-        await self.myvts.close()
-
-    async def DelCustomParameter(self, name):
-        """
-        Лучше всего использовать для создания параметров плагина
-
-        CustomParameter("EmiEyeX", -100, 100, 0)
-        """
-
-        try:
-            await self.myvts.request(
-                self.myvts.vts_request.requestDeleteCustomParameter(name)
-            )
-        except:
-            await self.VTubeConnect()
-            await self.myvts.request(
-                self.myvts.vts_request.requestDeleteCustomParameter(name)
-            )
-        await self.myvts.close()
-
-    def RandomBetween(self, a, b):
-        """
-        Просто случайное число, не более.
-
-        RandomBetween(-90, -75)
-        """
-        return random.randint(a, b)
-
-    async def AddVariables(self):
-        """
-        Создаёт все нужные переменные
-        """
-
-        parameters = ["EmiFaceAngleX", "EmiFaceAngleY", "EmiFaceAngleZ",
-                      "EmiEyeOpenLeft", "EmiEyeOpenRight",
-                      "EmiEyeX", "EmiEyeY", "EmiMountSmile", "EmiMountX"]
-        for param in parameters:
-            await self.SetCustomParameter(param)
-
-    async def DelVariables(self):
-        """
-        Удаляет все нужные переменные
-        """
-
-        parameters = ["EmiFaceAngleX", "EmiFaceAngleY", "EmiFaceAngleZ",
-                      "EmiEyeOpenLeft", "EmiEyeOpenRight",
-                      "EmiEyeX", "EmiEyeY", "EmiMountSmile", "EmiMountX"]
-        for param in parameters:
-            await self.DelCustomParameter(param)
-
-    async def UseEmote(self, emote):
-            """
-            Управляет значениями переменных, беря их и их значение из Emotes.json
-            """
-            def getemotes(emote):
-                with open("Emotes.json", "r") as f:
-                    emotes_data = json.load(f)
-                emote_data = emotes_data[emote]
-                return emote_data
-
-            emote_data = getemotes(emote)
-            rndm = EEC().RandomBetween
-            names = []
-            values = []
-            for parameter_name, parameter_value in emote_data.items():
-                if parameter_name == "EyesOpen":
-                    eyesopen_value = eval(parameter_value)
-                    values.append(eyesopen_value)
-                    values.append(eyesopen_value)
-                    names.append("EmiEyeOpenRight")
-                    names.append("EmiEyeOpenLeft")
-                else:
-                    names.append(parameter_name)
-                    value = eval(parameter_value)
-                    values.append(value)
-
-            await self.VTubeConnect()
-            for i, name in enumerate(names):
-                value = values[i]
-                await self.myvts.request(
-                    self.myvts.vts_request.requestCustomParameter(
-                        parameter=name,
-                        min=0,
-                        max=100,
-                        default_value=value
-                    )
-                )
-            await self.myvts.close()
-
-asyncio.run(EEC().UseEmote("Listening"))
-time.sleep(2)
-asyncio.run(EEC().UseEmote("Thinks"))
-time.sleep(2)
-asyncio.run(EEC().UseEmote("Says"))
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>config.json\r\ngeminiconfig.json\r\ncharaiconfig.json\r\nchat_history.json\r\ndata.json\r\nvoice.pt\r\n/__pycache__\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 7c0350e173dfa8a3b98805f122d4341c5fa90790)
+++ b/.gitignore	(date 1717872600070)
@@ -2,6 +2,6 @@
 geminiconfig.json
 charaiconfig.json
 chat_history.json
-data.json
+Emotes.json
 voice.pt
 /__pycache__
Index: .idea/Emilia.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Emilia.iml b/.idea/Emilia.iml
new file mode 100644
--- /dev/null	(date 1717850811692)
+++ b/.idea/Emilia.iml	(date 1717850811692)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="PYTHON_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+  <component name="PyDocumentationSettings">
+    <option name="format" value="PLAIN" />
+    <option name="myDocStringFormat" value="Plain" />
+  </component>
+</module>
\ No newline at end of file
Index: OptionsTest.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/OptionsTest.py b/OptionsTest.py
new file mode 100644
--- /dev/null	(date 1717948275881)
+++ b/OptionsTest.py	(date 1717948275881)
@@ -0,0 +1,149 @@
+from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QCheckBox, QComboBox, QPushButton, \
+    QApplication, QMessageBox, QHBoxLayout
+import json, os, sys
+from PyQt6.QtCore import QLocale
+
+def writeconfig(variable, value, configfile='config.json'):
+    try:
+        with open(configfile, 'r', encoding='utf-8') as f:
+            data = json.load(f)
+    except FileNotFoundError:
+        data = {}
+    except json.JSONDecodeError:
+        data = {}
+    data.update({variable: value})
+    with open(configfile, 'w', encoding='utf-8') as f:
+        json.dump(data, f, ensure_ascii=False, indent=4)
+
+
+def getconfig(value, def_value="", configfile='config.json'):
+    if os.path.exists(configfile):
+        with open(configfile, 'r') as configfile:
+            config = json.load(configfile)
+            return config.get(value, def_value)
+    else:
+        return def_value
+
+autoupdate_enable = getconfig('autoupdate_enable', 'True')
+lang = getconfig('language', QLocale.system().name())
+aitype = getconfig('aitype', 'charai')
+vtubeenable = getconfig('vtubeenable', "False")
+torchdevice = getconfig('devicefortorch', 'cuda')
+
+class OptionWindow(QWidget):
+    def __init__(self):
+        super().__init__()
+        self.setWindowTitle("Emilia: Options")
+        self.setFixedWidth(250)
+        self.setMinimumHeight(150)
+
+        layout = QVBoxLayout()
+
+        autoupdatelayout = QHBoxLayout()
+        self.autoupdate = QCheckBox()
+        if autoupdate_enable == "True":
+            self.autoupdate.setChecked(True)
+        self.autoupdate.stateChanged.connect(self.autoupdatechange)
+
+        autoupdatelayout.addWidget(QLabel("Auto Update"))
+        autoupdatelayout.addWidget(self.autoupdate)
+        layout.addLayout(autoupdatelayout)
+
+        langlayout = QHBoxLayout()
+        self.languagechange = QComboBox()
+        if lang == "ru_RU":
+            self.languagechange.addItems(["Russian", "English"])
+        else:
+            self.languagechange.addItems(["English", "Russian"])
+        self.languagechange.currentTextChanged.connect(lambda: self.langchange())
+
+        langlayout.addWidget(QLabel("Select Language"))
+        langlayout.addWidget(self.languagechange)
+        layout.addLayout(langlayout)
+
+
+        aitypelayout = QHBoxLayout()
+        self.aitypechange = QComboBox()
+        if aitype == "charai":
+            self.aitypechange.addItems(["Character.AI", "Google Gemini"])
+        elif aitype == "gemini":
+            self.aitypechange.addItems(["Google Gemini", "Character.AI"])
+        self.aitypechange.currentTextChanged.connect(lambda: self.aichange())
+
+
+        torchdevicelayout = QHBoxLayout()
+        self.torchdeviceselect = QComboBox()
+        if torchdevice == "cuda":
+            self.torchdeviceselect.addItems(["GPU", "CPU"])
+        elif torchdevice == "cpu":
+            self.torchdeviceselect.addItems(["CPU", "GPU"])
+        self.torchdeviceselect.currentTextChanged.connect(lambda: self.torchdevicechange())
+
+        torchdevicelayout.addWidget(QLabel("Select the device to generate the voice"))
+        torchdevicelayout.addWidget(self.torchdeviceselect)
+        layout.addLayout(torchdevicelayout)
+
+
+        vtubelayout = QHBoxLayout()
+        self.vtubecheck = QCheckBox()
+        if vtubeenable == "True":
+            self.vtubecheck.setChecked(True)
+        self.vtubecheck.stateChanged.connect(self.vtubechange)
+
+        vtubelayout.addWidget(QLabel("VTube Model"))
+        vtubelayout.addWidget(self.vtubecheck)
+        layout.addLayout(vtubelayout)
+
+        self.setLayout(layout)
+
+    def vtubechange(self, state):
+        if state == 2:
+            writeconfig('vtubeenable', "True")
+        else:
+            writeconfig('vtubeenable', "False")
+
+    def autoupdatechange(self, state):
+        if state == 2:
+            writeconfig('autoupdate_enable', "True")
+        else:
+            writeconfig('autoupdate_enable', "False")
+
+    def restartneed(self):
+        msg = QMessageBox()
+        msg.setWindowTitle("Restart Need")
+        text = "You have changed the setting that requires a restart, A RESTART IS REQUIRED"
+        msg.setText(text)
+        msg.exec()
+
+    def torchdevicechange(self):
+        value = self.torchdeviceselect.currentText()
+        if value == "GPU":
+            writeconfig('devicefortorch', "cuda")
+        elif value == "CPU":
+            writeconfig('devicefortorch', "cpu")
+
+    def aichange(self):
+        value = self.aitypechange.currentText()
+        if value == "Character.AI":
+            writeconfig('aitype', "charai")
+        elif value == "Google Gemini":
+            writeconfig('aitype', "gemini")
+        self.restartneed()
+        os.execv(sys.executable, ['python'] + sys.argv)
+
+    def langchange(self):
+        value = self.languagechange.currentText()
+        if value == "Russian":
+            writeconfig('language', "ru_RU")
+        elif value == "English":
+            writeconfig('language', "en_US")
+        self.restartneed()
+        os.execv(sys.executable, ['python'] + sys.argv)
+
+if __name__ == "__main__":
+    app = QApplication(sys.argv)
+
+    window = OptionWindow()
+    window.show()
+
+    sys.exit(app.exec())
\ No newline at end of file
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1717850625052)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1717850625052)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1717850625024)
+++ b/.idea/modules.xml	(date 1717850625024)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/Emilia.iml" filepath="$PROJECT_DIR$/.idea/Emilia.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1717851739198)
+++ b/.idea/misc.xml	(date 1717851739198)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Black">
+    <option name="sdkName" value="Python 3.10" />
+  </component>
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1717850625083)
+++ b/.idea/vcs.xml	(date 1717850625083)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/dictionaries/Kajitsy.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dictionaries/Kajitsy.xml b/.idea/dictionaries/Kajitsy.xml
new file mode 100644
--- /dev/null	(date 1717850811724)
+++ b/.idea/dictionaries/Kajitsy.xml	(date 1717850811724)
@@ -0,0 +1,3 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="Kajitsy" />
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1717850625611)
+++ b/.idea/.gitignore	(date 1717850625611)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: token.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/token.txt b/token.txt
new file mode 100644
--- /dev/null	(date 1717866504873)
+++ b/token.txt	(date 1717866504873)
@@ -0,0 +1,1 @@
+27c8147c8a7ca931a8196c88ef4afcaf2f063cef8b71fcd6f9aaeaf715bee42b
\ No newline at end of file
Index: .idea/discord.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/discord.xml b/.idea/discord.xml
new file mode 100644
--- /dev/null	(date 1717871018483)
+++ b/.idea/discord.xml	(date 1717871018483)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DiscordProjectSettings">
+    <option name="show" value="PROJECT_FILES" />
+    <option name="description" value="" />
+  </component>
+</project>
\ No newline at end of file
Index: data.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data.json b/data.json
new file mode 100644
--- /dev/null	(date 1717891743145)
+++ b/data.json	(date 1717891743145)
@@ -0,0 +1,7 @@
+{
+    "Emilia": {
+        "name": "Emilia",
+        "char": "WmJkG7m4hCRkvuL7zVkjABdWJmF7oSdNX4o_4tvEQCI",
+        "voice": "baya"
+    }
+}
\ No newline at end of file
